{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","LogCases","width","height","data","this","props","isAnimationActive","stroke","strokeDasharray","dataKey","interval","hide","scale","domain","allowDataOverflow","type","dot","React","Component","LogDeaths","BarNewCases","fill","BarNewDeaths","Charts","state","chartType","handleChange","bind","event","setState","target","value","fetch","then","res","json","catch","error","console","log","options","label","map","el","key","states","Object","keys","filter","s","sort","unshift","charts","d","color","className","slice","onSubmit","handleSubmit","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2859d14a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {BarChart, Bar, LineChart, XAxis, YAxis, CartesianGrid, Line, Tooltip} from 'recharts';\n\nclass LogCases extends React.Component {\n    render() {\n        return (\n            <LineChart width={350} height={150} data={this.props.data} isAnimationActive={false}>\n                <CartesianGrid stroke=\"#eee\" strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\"\n                    interval={14}\n                    hide />\n                <YAxis  scale=\"log\" domain={['auto', 'auto']} allowDataOverflow hide />\n                <Tooltip />\n                <Line type=\"monotone\" dataKey=\"cases\" stroke='blue' dot={false} />\n            </LineChart>\n        )\n    }\n}\n\nclass LogDeaths extends React.Component {\n    render() {\n        return (\n            <LineChart width={350} height={150} data={this.props.data} isAnimationActive={false}>\n                <CartesianGrid stroke=\"#eee\" strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\"\n                    interval={14}\n                    hide />\n                <YAxis  scale=\"log\" domain={['auto', 'auto']} allowDataOverflow hide />\n                <Tooltip />\n                <Line type=\"monotone\" dataKey=\"deaths\" stroke='red' dot={false} />\n            </LineChart>\n        )\n    }\n}\n\nclass BarNewCases extends React.Component {\n    render() {\n        return (\n            <BarChart width={350} height={150} data={this.props.data} isAnimationActive={false}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"date\"\n                  interval={14}\n                  hide />\n              <YAxis  hide />\n              <Tooltip />\n              <Bar dataKey=\"c_delta\" fill=\"blue\" />\n            </BarChart>\n        )\n    }\n}\n\nclass BarNewDeaths extends React.Component {\n    render() {\n        return (\n            <BarChart width={350} height={150} data={this.props.data} isAnimationActive={false}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"date\"\n                  interval={14}\n                  hide />\n              <YAxis hide />\n              <Tooltip />\n              <Bar dataKey=\"d_delta\" fill=\"red\" />\n            </BarChart>\n        )\n    }\n}\n\nclass Charts extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            data: null,\n            chartType: 'log-cases',\n        }\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleChange(event) {\n        this.setState({chartType: event.target.value})\n    }\n\n    componentDidMount() {\n        fetch('us-states.json')\n            .then(res => res.json())\n            .then(data => this.setState({data: data}))\n            .catch(error => console.log(error))\n    }\n\n    render() {\n        const chartTypes = [\n            {value: 'logs', label: 'Logs'},\n            {value: 'bars', label: 'Bars'},\n        ]\n        const options = chartTypes.map( el => <option key={el.value} value={el.value}>{el.label}</option> )\n\n        if (this.state.data !== null) {\n            let states = Object.keys(this.state.data)\n                .filter(s => s !== \"United States\")\n                .sort();\n            states.unshift('United States');\n            const charts = states.map( d => {\n                const data = this.state.data[d].data;\n                const color = this.state.data[d].color;\n                if (this.state.chartType === 'bars') {\n                    return (\n                        <div key={d} className=\"state-graph\">\n                            <div>{d}</div>\n                            <BarNewCases data={data.slice(1,-1)} />\n                            <BarNewDeaths data={data.slice(1,-1)} />\n                        </div>\n                    )\n                } else {\n                    return (\n                        <div key={d} className=\"state-graph\">\n                            <div>{d}</div>\n                            <LogCases data={data} />\n                            <LogDeaths data={data} />\n                        </div>\n                    )\n                }\n            })\n            return (\n                <>\n                <div className=\"charts-form\">\n                    <div>\n                        <span className=\"deaths\">――</span> Deaths <span className=\"deaths\">――</span>\n                        <span className=\"cases\">――</span> Cases <span className=\"cases\">――</span>\n                    </div>\n                    <form onSubmit={this.handleSubmit}>\n                        <label>Chart Type:\n                            <select value={this.state.chartType} onChange={this.handleChange}>\n                                {options}\n                            </select>\n                        </label>\n                    </form>\n                </div>\n                <div className=\"charts\">{charts}</div>\n                </>\n            )\n        } else {\n            return <div className=\"lds-dual-ring\"></div>\n        }\n    }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Charts></Charts>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}